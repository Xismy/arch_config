echo $HISTFILE
mkdir -p .config/zsh
ls
mv .zshrc .config/zsh
ls
nvim .config/zsh/.zshrc
nvim .zshenv
precmd() {print hola}
nvim .zshenv
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
ls
nvim .config/zsh/.zshrc
sudo su
man autoload
autoload
autoload --help
compinit
autoload compinit
compinit
alias cominit=ls
alias compinit=ls
compinit
autoload compinit
compinit
autoload -U compinit
compinit
cat /etc/zsh/zprofile
pacman -Q | grep zsh
sudo pacman -S zsh-syntax-highlighting
nvim .config/zsh/.zshrc
autoload -U compinit
compinit
nvim .config/zsh/.zshrc
sudo pacman -S zsh-autocomplete
pacman -Q --list zsh-autocomplete
nvim .config/zsh/.zshrc
clear
ls
setopt noautomenu
setopt nolist
setopt noautolist
zmodload zsh/compctl
zmodload zsh/complete
nvim .config/zsh/.zshrc
setopt noautolist
setopt autolist
unsetopt menu_complete
echo $ZSH_OPTIONS
setopt complete_inword
clear
setopt menucomplete
setopt nomenucomplete
setopt menucomplete
unsetopt menucomplete
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
ls -a
setopt
cat .zcompdump-archlinux-5.9
rm .zcompdump-archlinux-5.9
rm .zcompdump*
nvim
nvim .config/zsh/.zshrc
zmodload -l zsh/complist
zmodload -F -l zsh/complist
zmodload zsh/complist
zmodload -F -l zsh/complist
nvim .config/zsh
nvim .config/zsh/.zshrc
bindkey -v
clear
nvim .config/zsh/.zshrc
sudo pacman -S zsh-autosuggestions
pacman -Q --list zsh-autosuggestions
sudo pacman -Rs zsh-autocomplete
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
nvim .config/zsh/.zshrc
setopt noautomenu
setopt automenu
 cat .config/zsh/.zshrc
nvim .config/zsh/.zshrc
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search\
bindkey "^[[B" down-line-or-beginning-search
zle -N up-line-or-beginning-search\
zle -N down-line-or-beginning-search
clear
clear
zstyle ':completion:*' menu select
zstyle ':completion:*' menu interactive
zstyle ':completion:*' menu search
zstyle ':completion:*' menu select
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
bindkey "^[[A" history-beginning-search-backward\
bindkey "^[[B" history-beginning-search-forward
nvim .config/zsh/.zshrc
clear
clear
autoload -U vcs_info
vcs_info
cd projects/chengy
vcs_info
ls
ls -a
vcs_info
echo $vcs_info_msg_0_
echo $vcs_info_msg_1_
cd src
echo $vcs_info_msg_1_
vcs_info
echo $vcs_info_msg_1_
echo $vcs_info_msg_0_
echo $vcs_info_msg_1_
nvim .config/zsh/.zshrc
cd
nvim .config/zsh/.zshrc
cd .config/zsh
ls
ls -a
mv .zshrc zshrc
mv .zshrc zshrc
cd .config/zsh
mv zshrc .zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
pwd
realpath $(pwd)
man realpath
man realpath
sudo pacman -S zsh-completions 
nvim .config/zsh/.zshrc
pacman -Q --list zsh-completions
nvim .config/zsh/.zshrc
man realpath
sudo pacman -S coreutils
sudo pacman -! coreutils
pacman -Q coreutils
clear
man realpath
realpath $(pwd)
realpath --relative-to ~ $(pwd)
realpath --relative-to ~ /etc
realpath ~
man realpath
realpath --relative-base=~ $(pwd)
realpath --relative-base=~ /home/admin/arch_config
cat .config/zsh/.zshrc
zmodload
echo $fpath
man find
echo $fpath | grep compinit
man find
find $fpath -name compinit.zsh
man find
ls /usr/lib/kitty/shell-integration/zsh/completions
find $fpath -name _kitty
find $fpath -name _compinit
cat .config/zsh/.zshrc
find $fpath -exec grep compinit
find $fpath -exec grep compinit {} \;
find $fpath -type f -exec grep compinit {} \;
find $fpath -type f -exec grep -l compinit {} \;
cat /usr/share/zsh/functions/Completion/compinit
zmodload
nvim .config/zsh/.zshrc
zmodload
nvim .config/zsh/.zshrc
zmodload
nvim .config/zsh/.zshrc
zmodload
type zsh_directory_name
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
nvim .config/zsh/.zshrc
ping google.es
ping 1.1.1.1
ping 192.168.18.1.1
ping 192.168.18.1
ping google.es
nvim
nvim
nvim
nvim
nvim
nvim
nvim
nvim
nvim
nvim
sudo pacman -S audacity
exit
sudo pacman -S audacity
exit
sudo pacman -Syu
sudo pacman -Syu
reboot
webvplayer --config .config/webvplayer/webctl-conf.json
cd projects/webvplayer/
ls
cat front/package.json
npm --prefix front start
exit
cd projects/webvplayer/
npm --prefix front start
webvplayer --config .config/webvplayer/webctl-conf.json
cd projects/webvplayer/
npm --prefix front start
webvplayer --config .config/webvplayer/webctl-conf.json
steam
xwayland-satellite
DISPLAY=:0 xwayland-satellite
bg
disown
steam
DISPLAY=:0 steam
bg
disown
nvim .config/zsh/.zshrc
sudo pacman -Syu
xwayland-satellite &
disown
DISPLAY=:0 steam &
disown
pwd
thunar
nvim Shogun2.sh
DISPLAY=:0 steam &
if\

if [ 1 = 1 ]\
then\
echo 1\
fi
if [ 1 = 2 ]\
then
read -n1 fdsa 
exit
read -n1 fdsa
read -n 1 fdsa
exit
./install.sh 
exit
ls -l
cd .config
ls -l
man link
realpath dunst
realpath dunst
man lndir
clear
clear
cd
lndir /tmp/arch_config/dotfiles/.config .
ls
cd .config
ls
ls -l
sh
ls -l .config
man read
exit
read -s fdsa
q
exit
read
read -n1
read -n1 fdsa
exit
read -n1 a
echo $a
[ $a = '\n' ] && echo si || echo no
[ $a = '\n' ] && echo si || echo no
[ $a = 1 ] && echo si || echo no
[ $a == 1 ] && echo si || echo no
[ $a = '\n' ] && echo si || echo no
[ $a = '\n' ]
[ "$a" = '\n' ]
[ "$a" = '\n' ] && echo si || echo no
[ "$a" = '\r' ] && echo si || echo no
[ "$a" = '' ] && echo si || echo no
read -n1 a
[ "$a" = '' ] && echo si || echo no
[ "$a" = '\27' ] && echo si || echo no
read -n1 a
[ "$a" = 'a' ] && echo si || echo no
[ "$a" = '' ] && echo si || echo no
read -n1 a
[ "$a" = '' ] && echo si || echo no
exit
read -n1 asdf
[ $asdf = '' ] && echo si
[ $"asdf" = '' ] && echo si
[ "$asdf" = '' ] && echo si
read -n1 asdf
[ "$asdf" = '' ] && echo si
[ $"asdf" = '' ] && echo si
read -n1 asdf
[ $"asdf" = '' ] && echo si
clear
read -n1 asdf
[ "$asdf" = '' ] && echo si
read -n1 asdf
[ "$asdf" = '' ] && echo si
echo ["$asdf"]
[ "$asdf" = '' ] && echo si
read -n1 asdf
[ "$asdf" = '' ] && echo si
echo ["$asdf"]
read -n1 asdf
[ "$asdf" = '' ] && echo si
echo ["$asdf"]
read -n1 asdf
read -n1 asdf
[ "$asdf" = $'\e' ] && echo si
read -n1 asdf
[ "$asdf" = $'\e' ] && echo si
read -n1 asdf
[ -z "$asdf" ] && echo si
read -n1 asdf
[ -z "$asdf" ] && echo si
read -n1 asdf
[ -z "$asdf" ] && echo si
read -n1 -s key  # Lee un solo carácter (-n1) en modo silencioso (-s)
if [[ -z "$key" ]]; then   echo "Presionaste Enter"; elif [[ "$key" == " " ]]; then   echo "Presionaste Espacio"; else   echo "Presionaste: $key"; fi
if [[ -z "$key" ]]; then   echo "Presionaste Enter"; elif [[ "$key" == " " ]]; then   echo "Presionaste Espacio"; else   echo "Presionaste: $key"; fi
if [[ -z "$key" ]]; then   echo "Presionaste Enter"; elif [[ "$key" == " " ]]; then   echo "Presionaste Espacio"; else   echo "Presionaste: $key"; fi
if [[ -z "$key" ]]; then   echo "Presionaste Enter"; elif [[ "$key" == " " ]]; then   echo "Presionaste Espacio"; else   echo "Presionaste: $key"; fi
read -n1 -s key  # Lee un solo carácter (-n1) en modo silencioso (-s)
if [[ -z "$key" ]]; then   echo "Presionaste Enter"; elif [[ "$key" == " " ]]; then   echo "Presionaste Espacio"; else   echo "Presionaste: $key"; fi
read -n1 -s key  # Lee un solo carácter (-n1) en modo silencioso (-s)
if [[ -z "$key" ]]; then   echo "Presionaste Enter"; elif [[ "$key" == " " ]]; then   echo "Presionaste Espacio"; else   echo "Presionaste: $key"; fi
echo "Presiona una tecla (Espacio o Enter para probar):"
read -n1 -s key  # Lee un solo carácter (-n1) en modo silencioso (-s)
if [[ -z "$key" ]]; then   echo "Presionaste Enter"; elif [[ "$key" == " " ]]; then   echo "Presionaste Espacio"; else   echo "Presionaste: $key"; fi
 
echo "Presiona una tecla (Espacio o Enter para probar):"
read -n1 -s key  # Lee un solo carácter (-n1) en modo silencioso (-s)
if [[ -z "$key" ]]; then   echo "Presionaste Enter"; elif [[ "$key" == " " ]]; then   echo "Presionaste Espacio"; else   echo "Presionaste: $key"; fi
echo "Presiona una tecla (Espacio o Enter para probar):"
read -n1 -s key  # Lee un solo carácter (-n1) en modo silencioso (-s)
if [[ -z "$key" ]]; then   echo "Presionaste Enter"; elif [[ "$key" == " " ]]; then   echo "Presionaste Espacio"; else   echo "Presionaste: $key"; fi
a=" "
echo $ab
echo $a b
echo "$a b"
read asdff
read asdf
[ "-$a" = '-' ] && echo si
read asdf
[ "-$a" = '-' ] && echo si
echo "-$a-"
read asdf
echo "-$a-"
read -n1 asdf
read -n1 asdf
[ "$asdf" = '' ] && echo si
read -N1 asdf
[ "$asdf" = '' ] && echo si
[ "$asdf" = '\x0a' ] && echo si
echo $asdf
printf $asdf
read -N1 asdf
printf $asdf
printf "$asdf"
[ "$asdf" = '\x0a' ] && echo si
[[ "$asdf" = '\x0a' ]] && echo si
[ "$asdf" = '\x0a' ] && echo si
[ "$asdf" = $'\x0a' ] && echo si
exit
ls /usr/share/zsh/site-functions
pacman -Q --search zsh
pacman -Q
pacman -Q --explicit
pacman -Q --list zsh-completions
ls
clear
ls
ls -l
ls projects
ls
ls arch_config
cd arch_config
ls system
ls
ls system
rm -r system
git status
git rm user/.config/hypr/
git rm -r user/.config/hypr/
git status
git add user/.config/dunst
git add install.sh
git status
kitten icat user/.config//wallpapers/*
clear
nvim .gitignore
git statu
sgit statu
git status
git rm -r user/.config/hypr/
git rm -rf user/.config/hypr/
ls
git status
git add .gitignore
ls user/.config
git rm -rf user/.config/hypr
git rm user/.config/hypr
rm -r user/.config/hypr
git status
cat user/.config/waybar/config.jsonc
ls
ls
cd user
ls
git status
git rm -rf .config/nvim/
ls
git status
git add .config/waybar/
git status
git commit 
clear
ls
cd ..
ls
ls user
git mv user/ dotfiles
ls
nvim install.sh
cd arch_config
ls
target_base=$(realpath dotfiles)
clear
find $target_base -mindepth 1 -exec realpath --relative-to=$target_base {} \;
man ln
./install.sh
./install.sh
ls -l
ls -l ~/.config
[ -L ~/.config ] || echo si
[ -L ~/.config ] && echo si || echo no
[ -L ~/.config/dunst ] && echo si || echo no
[ -e ~/.config/dunst ] && echo si || echo no
file ~/.config/dunst
cd
cd .config
ls -l
rm dunst
ln /home/admin/arch_config/dotfiles/.config/dunst dunst
ln -l /home/admin/arch_config/dotfiles/.config/dunst dunst
ln -s /home/admin/arch_config/dotfiles/.config/dunst dunst
[ -e ~/.config/dunst ] && echo si || echo no
ls -l
rm nvim_
ln -sf /home/admin/arch_config/dotfiles/.config/wallpapers wallpapers
ls -l
ln -sf /home/admin/arch_config/dotfiles/.config/waybar waybar
ls -l
rm hypr
ls -l
file ~/.config/dunst
readlink ~/.Config/dunst
readlink ~/.config/dunst
readlink -f ~/.config/dunst
ls
cd
touch a
ln a b
readlink b
rm b
ln -s a b
readlink b
readlink -f b
rm a b
[ 'asdf' ~ 'asdf' ]
[ 'asdf' ~= 'asdf' ]
[[ 'asdf' =~ 'asdf' ]]
[[ 'asdf' =~ 'asdf' ]] && echo si || echo no
[[ 'asdffdsa' =~ 'asdf.*' ]] && echo si || echo no
[[ 'asdffdsa' =~ 'asdf.' ]] && echo si || echo no
[[ 'asdffdsa' =~ 'asdf' ]] && echo si || echo no
[[ 'asdffdsa' =~ 'df' ]] && echo si || echo no
[[ 'asdffdsa' =~ '^df' ]] && echo si || echo no
[[ 'asdffdsa' =~ '^asdf' ]] && echo si || echo no
[ 'asdffdsa' =~ '^asdf' ] && echo si || echo no
[[ 'asdffdsa' =~ '^asdf' ]] && echo si || echo no
read -n 1
read -p 1 fdsa
read -n 1 fdsa
read -k 1
man backup
ls
touch a
backup a
backup a b
man ,v
man mv
mv a a
mv -f a a
man mv
mv a a_$(date)
ls
echo a$(date)
man date
date -R
man date
date -I
man date
date +%d
date +%d
date %d
date +%y%m%d%H%M%S
a=ls
echo $a
ls
echo $?
ls fdsa
echo $?
?=1
cd -
cd 
cd arch_config
./install.sh
read -k 1 option
echo $option
./install.sh
./install.sh
read -n1 fdsa
sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
sh
./install.sh
./install.sh
./install.sh
find $target_base -mindepth 1 -exec realpath --relative-to=$target_base {} \;
file_list=$(find $target_base -mindepth 1 -exec realpath --relative-to=$target_base {} \;)
echo $file_list
echo ${file_list[1]}
file_list=($(find $target_base -mindepth 1 -exec realpath --relative-to=$target_base {} \;))
echo ${file_list[1]}
./install.sh
./install.sh
for a in $file_list\
do echo $a\
done
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
man read
man read
man read
sh
read -qc
sh
sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
echo -e "\033[1K"
printf fdsa
printf fdsa;echo -e "\033[1K";echo a
printf fdsa;printf -e "\033[1K";echo a
printf fdsa;printf "\033[1K";echo a
printf fdsafdsfds;printf "\033[1K";echo as
printf fdsafdsfds;printf "\033[1K\r";echo as
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
./install.sh
ls -l
touch a 
mv -v a b
rm b
cd 
ls
cp -r arch_config /tmp
ls /tmp
rm -r /tmp/arch_config
rm -rf /tmp/arch_config
cp -r arch_config /tmp
clear
cd arch_config
ls
./install.sh
file_list=($(find $target_base -mindepth 1 -exec realpath --relative-to=$target_base {} \;))
for a in $file_list\
do echo $a\
done
targets_list=($(find $target_base -mindepth 1 -exec realpath --relative-to=$target_base {} \;))\
    for target in $targets_list\
    do\
		echo $target\
done
./install.sh
echo $target_base
./install.sh
target_base=$(realpath dotfiles)
targets_list=($(find $target_base -mindepth 1 -exec realpath --relative-to=$target_base {} \;))
for target in $targets_list\
    do\
		echo $target\
done
./install.sh
./install.sh
cd
rm -rf /tmp/arch_config
cp -r arch_config /tmp
rm -rf /tmp/arch_config
cp -r arch_config /tmp
nvim .config/zsh/.zshrc
useradd --create-home test
sudo useradd --create-home test
ls
sudo passwd test
su test
cp -r arch_config /tmp
su test
ls arch_config/dotfiles
ls
[[ -L /home/admin/.config/waybar && "/home/admin/arch_config/dotfiles/.config/waybar" =~ "^/home/admin/arch_config/dotfiles" ]] && echo si || echo no
exit
[[ -L /home/admin/.config/waybar && "/home/admin/arch_config/dotfiles/.config/waybar" =~ "^/home/admin/arch_config/dotfiles" ]] && echo si || echo no
[[ -L /home/admin/.config/waybar && "/home/admin/arch_config/dotfiles/.config/waybar" =~ "^/home/admin/arch_config/dotfiles.*" ]] && echo si || echo no
[[ 'asdf' =~ 'asdf' ]] && echo si || echo no
[[ 'asdf' =~ 'asd' ]] && echo si || echo no
[[ "/home/admin/arch_config/dotfiles/.config/waybar" =~ "^/home/admin/arch_config/dotfiles" ]] && echo si || echo no
[[ "/home/admin/arch_config/dotfiles/.config/waybar" =~ "/home/admin/arch_config/dotfiles" ]] && echo si || echo no
[[ "/home/admin/arch_config/dotfiles/.config/waybar" =~ "^/home/admin/arch_config/dotfiles" ]] && echo si || echo no
[[ 'asdf' =~ '^asd' ]] && echo si || echo no
[[ 'asdf' =~ ^asd ]] && echo si || echo no
exit
nvim /home/admin/.config/zsh/.zhistory
[ 1 = 1 ] && echo si || >&2 echo err
[ 1 = 2 ] && echo si || >&2 echo err
[ 1 = 2 ] && echo si || >&2 echo err
echo "[ 1 = 2 ] && echo si || >&2 echo err" > asdf
ls
rm a
cat asdf
sh asdf 2>/dev/null
sh asdf
nvim asdf
sh asdf 2>/dev/null
rm asdf
if ls\
then\
echo si\
fi
if ls dfsa\
then\
echo si\
fi
if ls dfsa\
then\
echo si\
else\
fi
if ls dfsa\
then\
echo si\
else\
echo no\
fi
su test
rm -r /tmp/arch_config
rm -rf /tmp/arch_config
cd arch_config
cp -r arch_config /tmp
cd 
cp -r arch_config /tmp
chmod o+x /tmp/arch_config/install.sh
rm -rf /tmp/arch_config
cp -r arch_config /tmp
chmod o+x /tmp/arch_config/install.sh
rm -rf /tmp/arch_config
cp -r arch_config /tmp
chmod o+x /tmp/arch_config/install.sh
cd arch_config
./install.sh
cd ..
rm -rf /tmp/arch_config
cp -r arch_config /tmp
chmod o+x /tmp/arch_config/install.sh
cd arch_config
nvim
nvim
nvim
cd arch_config
nvim
su test
rm -rf /tmp/arch_config
cp -r arch_config /tmp
chmod o+x /tmp/arch_config/install.sh
cd arch_config
git status
git add install.sh
cd
mv .config/niri arch_config
cd arch_config
ls 
mv niri dotfiles
cd dotfiles
mv niri .config
ls .config
cd
mv .config/nvim arch_config/dotfiles/.config
ls
mv .zshenv arch_config/dotfiles
mv .config/zsh arch_config/dotfiles/.config
cd arch_config
./install.sh
